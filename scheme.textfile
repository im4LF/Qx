h2. www/index.php

Подключение @Q@ и запуск приложения.

bc. require('../Q/init.php');              // инициализация Q
Q::app(array(
    'app'       => '../apps/hello',    // директория приложения
    'shared'    => '../apps/shared'    // дополнительная директория с классами
))->run();                             // создать и запустить приложение

h2. Q/init.php 

Объявляется константа @Q_PATH@ -- абсолютный путь к директории @Q@.
Объявляется класс @import@, отвечающий за подключение библиотек, конфигурационных файлов и автозагрузку классов.

h3. *import*
 
Singleton класс, реализует статические методы.

*import::config* -- загрузка файла конфигурации по маске. 
Маска может иметь вид -- @path_key:configuration-file.php@, @path_key:path/to/configuration-file.php@. Где @path_key:@ - псевдоним абсолютного пути, например @q:@ -- это @Q_PATH@.
Загрузка конфигурации всегда происходит из папки @configs/@ - т.е. при загрузке конфигурации @q:import.php@ происходит подключение файла @Q_PATH/configs/import.php@.

*import::from* -- загрузка классов и подключение файлов по маске. 
При инициализации @import@ производится поиск классов в директориях указанных в конфигурации:

bc. array(
    // конфигурация сканера для поиска классов
    'scanner'  => array(
        // список директори для сканирования в виде path_key:folder
        'directories' => array('q:classes', 'q:impls'),
        // фильтр для файлов содержищах классы
        'filenames'   => '/\.(class|impl)\.php$/'
    ),
    // кэш найденных классов
    'cache-file' => 'q:cache/import.txt'    
)

Далее при вызове @import::from('App')@ - происходит поиск и подключение файла с классои @App@.

Так же @import::from@ служит для загрузки файлов, например @import::from('q:some/file')@ - загрузка файла @Q_PATH/some/file.php@, @import::from('q:some/directory/*')@ - означает рекурсивную загрузку всех файлов в директирии @Q_PATH/some/directory/*@ c расширением @.php@

h2. Q::app(...)

bc. Q::app(array(
    'app'       => '../apps/hello',
    'shared'    => '../apps/shared'
))

В методе @Q::app@ происходит объявление констант @APP_PATH@ и @SHARED_PATH@ в соотвествии с ключами в переданном массиве.
Далее загружается конфигурация - @import::config('app:import.php')@ для загрузчика (конфигурация загружается из @APP_PATH/configs/import.php@):

bc. array(
    'scanner' => array(
        'directories' => array(
            'shared:types', 
            'app:impls', 'app:controllers', 'app:scenarios',
            'q:classes', 'q:impls'
        ),
        'filenames' => '/\.(class|controller|action|type|impl)\.php$/',
    ),
    // кэш найденных классов
    'cache-file' => 'app:cache/import.txt' 
)

Далее в соответствии с новой конфигурацией происходит повторное сканирование классов.
Метод @Q::app@ возвращает объект сласса @App@

h2. Q::app(...)->run()

Загрузка конфигурации приложения. 
Создание нового запроса и отправка его на обработку:

bc. // QF - factory классов
// метод n($class_name, $param1, $param2, ...) - создает объект класса $class_name с параметрами ($param1, ...)
// метод s($class_name, $param1, ...) - возвращает singleton объект
QF::n(
    'Request',                      // создать новый объект класса Request
        $_SERVER['REQUEST_URI'],    // url запроса
        // параметры запроса
        array( 
            'method' => $_SERVER['REQUEST_METHOD'], // метод - GET, POST
            'scenario' => 'external',               // сценарий обработки запроса
            'get' =>& $_GET,
            'post' =>& $_POST,
            'files' =>& $_FILES
        )
)->dispatch();    // обработать запрос по указанному сценарию

h2. Request и сценарий обработки запроса

Сценарий обработки запроса служит для возможности простого внедрения дополнительных этапов обработки.
Сценарий -- это обычный класс с методом @run()@, в котором описывается алгоритм обработки запроса:

bc. class ExternalScenario
{
    protected $_request;
    function __construct(&$request)
    {
        $this->_request =& $request;
    }
    function run()
    {
        $this->_request->url = QF::n('URL', $this->_request->raw_url)->parse();
        $this->_request->router = QF::n('Router', $this->_request)->route();
        // здесь может находится проверка доступа, которая изменит имя контроллера на AccessDenied
        $this->_request->response = QF::n('Runner', $this->_request)->run();
    }
}

h3. URL

Парсер запроса, например @/path/to/some/section/.some-action.action-state/-var/value/-page/2.html@ - выделются следующие компоненты:
* path -- путь к ресурсу @/path/to/some/section/@
* action -- действие над ресурсом @some-action@ - необязательный параметр
* state -- состояние действия @action-state@ - необязательный параметр
* args -- передаваемые аргументы @array('var'=>'value', 'page'=>2)@
* view -- тип представления результата @html@ (можно указать различные типы - json, xml, rss, ... - все зависит от шаблонизатора)

h3. Router

По параметрам запроса определяет имя контроллера.

h3. Runner

Производит поиск метода исходя из параметров запроса (по @method@, @url->action@, @url->view@), валидацию аргументов для вызываемого метода и непосредственно вызов.

h3. Implementation (изменяемая реализация)

Такие классы как @URL@, @Router@ являются классами с изменяемой реализацией. Непосредственная реализация скрыта в implementation класса. Парсинг url'a производит класс @SimpleURL@, роутинг -- @MaskRouter@.

Конфигурация реализаций и типы сценариев описаны в файле конфигурации приложения (@app:app.php@):

bc. array(
    // реализации
    'impls' => array(
        'url'    => 'SimpleURL',
        'router' => 'MaskRouter',
        'parser' => 'DocCommentParser'
    ),
    // сценарии обработки запросов
    'scenarios' => array(
        // класс обработки external запроса - т.е. внешнего, отправленного браузером пользователя
        'external' => 'ExternalScenario',
        // класс обработки internal сценария - запроса отправленного на обработку из приложения
        // так же можно описать другие типы запросов, 
        // и при создании нового запроса внутри приложения указать желаемый тип
        'internal' => 'InternalScenario'
    )
)

Таким образом изменив реализацию @URL@ можно изменить вид url'a - например на @/controller/action.view@.

h2. Контроллер

Контроллер -- это класс унаследованный от класса @Any_Controller@:

bc. class Any_Controller
{
    protected $_request;	
    function __construct(&$request)
    {
        $this->_request =& $request;
    }
}

Пример контроллера:

bc. class Index_Controller extends Any_Controller
{
    /**
     * @action *:*.*
     */
    function index() {}
}

h3. Конфигурация контроллеров

В DocComment'ax описывается конфигурация методов

Тэг @@action@ указывает какой именно action соответствует данному методу или какой метод необходимо вызывать при том или ином action'е.
Формат тэга @@action@: @method:action.view [params]@, где:
* method -- метод запроса (get, post)
* action -- вызываемый action
* view -- тип отображения (html, json, xml, ...)
* params -- дополнительные параметры, имеют формат @[param1 value1 value2, param2, param3, ...]@. Где param1 это ключ, valueX - значение, значения могут не указываться

@*:*.*@ соответствует любому запрошенному action'у

Так же описание action'ов может находиться в DocComment'ах класса:

bc. /**
 * @action *:*.* index
 * @action get:login.* loginForm
 */
class User_Controller extends Any_Controller
{
    function index() {}
    function loginForm() {}
    /**
     * @action post:login.* [after clearOldLogin loginUser]     
     */
    function simpleLogin($email, $password) {}
    function clearOldLogin() {}
    function loginUser() {}
}

Тэг @@action@ описанный в DocComment'ах класса имеет вид: @method:action.view controllerMethod [params]@, где:
* method -- метод запроса (get, post)
* action -- вызываемый action
* view -- тип отображения (html, json, xml, ...)
* controllerMethod  -- имя метода, обрабатывающего данный action 
* params -- дополнительные параметры

В данном примере для метода @simpleLogin@ action описан как @@action post:login.* [after clearOldLogin loginUser]@ - указан параметр @after@ со значениями @clearOldLogin@ и @loginUser@. 
В параметре @after@ указываются методы, которые необходимо автоматически вызвать после отработки @controllerMethod@ - в данном случае после отработки @simpleLogin@ будут вызваны методы @clearOldLogin@ и @loginUser@.
Таким же образом можно указать параметр @before@ для вызова методов до отработки @controllerMethod@.

h3. Конфигурация валидатора для методов контроллера

bc. ...
class User_Controller extends Any_Controller
{
    ...
    /**
     * @action post:login.* [after clearOldLogin loginUser]
     * 
     * @config validation [on, auto soft, user]
     * @param Email $email post [required, valid, exists]
     * @param String $password post [required, min(6) as min]
     */
    function simpleLogin($email, $password) {}    
    /**
     * Пользовательская функция проверки аргументов метода simpleLogin
     *
     * @param array $errors ошибки автоматической валидации, 
     *               каждый элемент является объектом Validator
     */
    function simpleLogin__validate($errors)
    {	
    	// $errors['email']->value()->update('default@email.org');
    	// $errors['email']->reset('valid')->validate();
    	// reset($rule_name) - сброс предыдущей проверки правила $rule_name    	
        return $errors;
    }
    /**
     * Метод вызываемый при ошибках в валидации
     */	
    function simpleLogin__validation_error($errors) {}	
}

Каждый аргумент метода описывается тэгом @@param@. Формат тэга - @@param type $var from [rules]@, где:
* type -- тип аргумента - класс содержащий набор соответсвующих правил  
* $var -- имя аргумента
* from -- откуда необходимо брать значение аргумента. get - из массива @$_GET@, post - @$_POST@, args - из параметров переданных через URL 
* [rules] -- набор правил

Конфигурация валидатора описывается тэгом @@config validation@. Формат тэга @@config validation [param1, param2 value1 value2, param3]@.
Парметры могут быть слудующими:
* on -- включить валидацию (без значений)
* auto -- автоматическая валидация - на основе тэгов @param
* user -- пользовательская валидация - вызывается фукция с именем @controllerMethod__validate@

Каждый из типов валидации может быть strict или soft. Strict означает что при нахождении ошибки вызывается метод @controllerMethod__validation_error@. Soft будет передавать управление в user-defined метод валидации - @controllerMethod_validate@ или сразу в @controllerMethod@